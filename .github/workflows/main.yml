name: davydehaas.nl main
on:
  push:
    branches:
      - main

# Ensures that only one deploy task per branch/environment will run at a time.
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: false

env:
  TARGET_DIRECTORY: /opt/compose/davydehaasnl/
  PGID: 1000
  PUID: 1000
  TZ: Etc/UTC
  USER_DIR: /opt/appdata/davydehaasnl/
  DOMAIN_NAME: davydehaas.nl
  DOCKER_USERNAME: davydehaas98
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE: davydehaas98/davydehaasnl
  DOCKER_TAG: main-${{ github.run_number }}-${{ github.run_attempt }}

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: node:16.14
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build --if-present
        env:
          CI: false
      - name: Test
        run: npm test
        env:
          CI: false
      - name: Upload release artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-artifact
          path: ./build
      - name: Upload Dockerfile artifact
        uses: actions/upload-artifact@v3
        with:
          name: dockerfile-artifact
          path: ./Dockerfile
      - name: Upload NGINX artifact
        uses: actions/upload-artifact@v3
        with:
          name: nginx-artifact
          path: ./nginx.conf 
  deliver:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download release artifact
        uses: actions/download-artifact@v3
        with:
          name: release-artifact
          path: ./build
      - name: Download Dockerfile artifact
        uses: actions/download-artifact@v3
        with:
          name: dockerfile-artifact
          path: .
      - name: Download NGINX artifact
        uses: actions/download-artifact@v3
        with:
          name: nginx-artifact
          path: .
      - name: Publish Docker image
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ env.DOCKER_USERNAME }} --password-stdin
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} .
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest .
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
  deploy:
    needs: deliver
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: SSH SCP | Copy docker-compose.yml
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          #password: ${{ secrets.SSH_PASSWORD }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: docker-compose.yml
          target: ${{ env.TARGET_DIRECTORY }}
          rm: true # remove target folder before uploading data
      - name: SSH | Start container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          #password: ${{ secrets.SSH_PASSWORD }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ${{ env.TARGET_DIRECTORY }}
            
            echo 'PGID=${{ env.PGID }}' >> .env
            echo 'PUID=${{ env.PUID }}' >> .env
            echo 'TZ=${{ env.TZ }}' >> .env
            echo 'USER_DIR=${{ env.USER_DIR }}' >> .env
            echo 'DOMAIN_NAME=${{ env.DOMAIN_NAME }}' >> .env
            
            echo 'DOCKER_IMAGE=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}' >> .env
            echo 'DOCKER_TAG=${{ env.DOCKER_TAG }}' >> .env

            docker-compose -f docker-compose.yml up -d
