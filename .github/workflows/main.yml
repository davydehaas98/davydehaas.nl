name: main
on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: false

env:
  TARGET_DIRECTORY: /opt/compose/davydehaasnl/
  PGID: 1000
  PUID: 1000
  TZ: Etc/UTC
  USER_DIR: /opt/appdata/davydehaasnl/
  DOMAIN_NAME: davydehaas.nl
  DOCKER_USERNAME: davydehaas98
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE: davydehaas98/davydehaasnl
  DOCKER_TAG: main-${{ github.run_number }}-${{ github.run_attempt }}
  WEBSITE_URL: https://davydehaas.nl

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: 20
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test
      - name: Upload build artifact
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: build
          path: ./build
  deliver:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Download build artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: build
          path: ./build
      - name: Publish Docker image
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ env.DOCKER_USERNAME }} --password-stdin
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} .
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest .
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
  deploy:
    needs: deliver
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: SSH SCP | Copy docker-compose.yml
        uses: appleboy/scp-action@917f8b81dfc1ccd331fef9e2d61bdc6c8be94634 # v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          #password: ${{ secrets.SSH_PASSWORD }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: docker-compose.yml
          target: ${{ env.TARGET_DIRECTORY }}
          # remove target folder before uploading data
          rm: true
      - name: SSH | Start container
        uses: appleboy/ssh-action@029f5b4aeeeb58fdfe1410a5d17f967dacf36262 # v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          #password: ${{ secrets.SSH_PASSWORD }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ${{ env.TARGET_DIRECTORY }}

            echo 'PGID=${{ env.PGID }}' >> .env
            echo 'PUID=${{ env.PUID }}' >> .env
            echo 'TZ=${{ env.TZ }}' >> .env
            echo 'USER_DIR=${{ env.USER_DIR }}' >> .env
            echo 'DOMAIN_NAME=${{ env.DOMAIN_NAME }}' >> .env

            echo 'DOCKER_IMAGE=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}' >> .env
            echo 'DOCKER_TAG=${{ env.DOCKER_TAG }}' >> .env

            docker compose -f docker-compose.yml up -d
  lighthouse-check:
    needs: deploy
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - run: mkdir -p ${{ github.workspace }}/tmp/lighthouse-report
      - name: Lighthouse check
        uses: foo-software/lighthouse-check-action@a80267da2e0244b8a2e457a8575fc47590615852 # v12.0.1
        id: lighthouseCheck
        with:
          outputDirectory: ${{ github.workspace }}/tmp/lighthouse-report
          urls: ${{ env.WEBSITE_URL }}
      - name: Upload Lighthouse check results
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: lighthouse-report
          path: ${{ github.workspace }}/tmp/lighthouse-report
      - name: Verify Lighthouse check results
        uses: foo-software/lighthouse-check-status-action@2b9d5101f7a0de86ddb153a0d77ad7046aac1052 # v3.0.1
        with:
          lighthouseCheckResults: ${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}
          minAccessibilityScore: "90"
          minBestPracticesScore: "50"
          minPerformanceScore: "50"
          minProgressiveWebAppScore: "50"
          minSeoScore: "50"
  zap-scan:
    needs: deploy
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: ZAP scan
        uses: zaproxy/action-baseline@66042c8e7e24680119199a017e5b0e8603bf4dae # v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: ${{ env.WEBSITE_URL }}
          rules_file_name: .zap/rules.tsv
          cmd_options: -a
  k6-load-test:
    needs: [lighthouse-check, zap-scan]
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: K6 load test
        uses: grafana/k6-action@e4714b734f2b0afaabeb7b4a69142745548ab9ec # v0.3.1
        with:
          filename: load-test.js
          flags: --out json=results.json
      - name: Upload k6 load test results
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: k6-report
          path: results.json
